
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import re
from pathlib import Path
import random

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, messagebox, Button, PhotoImage
from frame4 import open_frame4


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame3"

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# Function to validate entry box for username/email
def validate_email(email):
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    return re.match(pattern, email)
    
# Function to validate entry box for password
def validate_password(password):
    pattern = r"^(?=.*[0-9])(?=.*[!@#$%^&*(),.?\":{}|<>]).*$"
    return re.match(pattern, password) 
    
# Function to write account information into file
def store_info(username, password, auth, question):
    with open("accounts.txt", "a") as file:
        file.write(f"{username}\n{password}\n{auth}\n{question}\n")
        
    with open("current_user.txt", "a") as file:
        file.write(f"{username}\n{password}\n")
        
def submit_butt(username, password, auth):
    if validate_existence(username, password):
        messagebox.showerror("Error", "Account already exists")
        return
    
    if "@" in username:
        if not validate_email(username):
            messagebox.showerror("Error", "Please enter a valid email address")
            return
    elif not username.strip():
        messagebox.showerror("Error", "Username cannot be empty")
        return

    if not validate_password(password):
        messagebox.showerror("Error", "Password must contain at least 1 number and special character")
        return
    
    # If all validations pass, store the account information
    store_info(username, password, auth, question)
    window.destroy()
    open_frame4()
    
# Function to check if the account information already exists
def validate_existence(username, password):
    with open("accounts.txt", "r") as file:
        lines = file.readlines()
        # Combine lines into pairs of username-password
        accounts = [lines[i:i+2] for i in range(0, len(lines), 2)]
        for account in accounts:
            if account[0].strip() == username and account[1].strip() == password:
                return True
    return False

# Frontend
def open_frame2():
    global window
    global question
    window = Tk()

    window.geometry("978x640")
    window.configure(bg = "#DAD4BF")

    canvas = Canvas(
        window,
        bg = "#DAD4BF",
        height = 640,
        width = 978,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        74.0,
        640.0,
        fill="#C3C3A9",
        outline="")

    canvas.create_rectangle(
        0.0,
        0.0,
        978.0,
        67.0,
        fill="#B5B59D",
        outline="")

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        37.0,
        33.0,
        image=image_image_1
    )

    canvas.create_text(
        74.0,
        16.0,
        anchor="nw",
        text="Key Notebook",
        fill="#000000",
        font=("Amaranth Regular", 32 * -1)
    )

    canvas.create_rectangle(
        378.0,
        207.0,
        719.0,
        473.0,
        fill="#DAD4BF",
        outline="")

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        534.5,
        346.5,
        image=entry_image_1
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        534.5,
        240.0,
        image=entry_image_2
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_2 = canvas.create_image(
        534.5,
        456.0,
        image=entry_image_2
    )

    frame2_username = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0,
        font=("Andada Pro", 12),
    )
    frame2_username.place(
        x=406.0,
        y=206.0,
        width=257.0,
        height=61.0
    )
    frame2_password = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0,
        font=("Andada Pro", 12),
        show="*"
    )
    frame2_password.place(
        x=406.0,
        y=314.0,
        width=257.0,
        height=61.0
    )
    frame2_auth = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0,
        font=("Andada Pro", 12),
    )
    frame2_auth.place(
        x=406.0,
        y=422.0,
        width=257.0,
        height=61.0
    )

    canvas.create_text(
        414.0,
        120.0,
        anchor="nw",
        text="Create Account",
        fill="#000000",
        font=("RobotoSerifNormalRoman Regular", 36 * -1)
    )

    canvas.create_text(
        410.0,
        190.0,
        anchor="nw",
        text="email or username",
        fill="#000000",
        font=("AndadaProRoman Regular", 13 * -1)
    )

    canvas.create_text(
        410.0,
        295.0,
        anchor="nw",
        text="password",
        fill="#000000",
        font=("AndadaProRoman Regular", 13 * -1)
    )

    questions = [
        "The name of your first pet?",
        "Where did you attend highschool?",
        "What city were you born in?",
        "Favorite author?",
        "Favorite coding language?"
    ]

    # Function to select a random question
    def select_random_question():
        return random.choice(questions)

    question = select_random_question()
    # Create a text item in the canvas to display the question
    text_item = canvas.create_text(
        410.0,
        405.0,
        anchor="nw",
        text=question,  # Initially display a random question
        fill="#000000",
        font=("AndadaProRoman Regular", 13 * -1)
    )

    # Function to update the text item with a new random question
    def update_random_question():
        canvas.itemconfig(text_item, text=select_random_question())

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    frame2_submit_button = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: submit_butt(frame2_username.get(), frame2_password.get(), frame2_auth.get()),
        relief="flat"
    )
    frame2_submit_button.place(
        x=413.0,
        y=518.0,
        width=244.0,
        height=67.0
    )
    window.resizable(False, False)
    window.mainloop()